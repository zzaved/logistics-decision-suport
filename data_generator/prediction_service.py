"""
Servi√ßo de Predi√ß√£o Autom√°tica
Executa predi√ß√µes periodicamente e salva no banco
"""

import time
import signal
import sys
from datetime import datetime
from pathlib import Path
import threading

import sys
from pathlib import Path

# Adicionar path para database
sys.path.append(str(Path(__file__).parent.parent / "database"))
from prediction_model import PredictionModel

class PredictionService:
    """
    Servi√ßo que executa predi√ß√µes automaticamente
    """
    
    def __init__(self, intervalo_minutos=5):
        self.intervalo = intervalo_minutos * 60  # Converter para segundos
        self.executando = False
        self.model = PredictionModel()
        self.contador_predicoes = 0
        
        # Handler para parada
        signal.signal(signal.SIGINT, self.parar_graceful)
        signal.signal(signal.SIGTERM, self.parar_graceful)
    
    def executar_predicao_thread(self):
        """Executa predi√ß√£o em thread separada"""
        try:
            resultado = self.model.executar_predicao(salvar=True)
            self.contador_predicoes += 1
            
            # Verificar alertas cr√≠ticos
            alertas_criticos = []
            for pred in resultado['predicoes'][:3]:  # Pr√≥ximas 3 horas
                if not pred['dentro_limites']:
                    alertas_criticos.append({
                        'hora': pred['hora_futura'],
                        'estoque': pred['estoque_previsto'],
                        'ofensor': pred['ofensor_principal']
                    })
            
            if alertas_criticos:
                print("\nüö® ALERTAS CR√çTICOS:")
                for alerta in alertas_criticos:
                    print(f"   +{alerta['hora']}h: Estoque {alerta['estoque']:.0f} ton - "
                          f"Causa: {alerta['ofensor']}")
            
        except Exception as e:
            print(f"‚ùå Erro na predi√ß√£o #{self.contador_predicoes}: {e}")
    
    def executar(self):
        """Loop principal do servi√ßo"""
        print(f"üîÆ Servi√ßo de Predi√ß√£o iniciado")
        print(f"üìä Predi√ß√µes a cada {self.intervalo//60} minutos")
        print(f"üí° Pressione Ctrl+C para parar")
        print("=" * 60)
        
        self.executando = True
        
        # Executar primeira predi√ß√£o imediatamente
        print(f"\nüéØ Executando predi√ß√£o inicial...")
        self.executar_predicao_thread()
        
        try:
            while self.executando:
                # Aguardar intervalo
                for _ in range(self.intervalo):
                    if not self.executando:
                        break
                    time.sleep(1)
                
                if self.executando:
                    print(f"\nüîÑ Executando predi√ß√£o #{self.contador_predicoes + 1}...")
                    
                    # Executar em thread para n√£o bloquear
                    thread = threading.Thread(target=self.executar_predicao_thread)
                    thread.start()
                    thread.join(timeout=30)  # Timeout de 30 segundos
                    
                    if thread.is_alive():
                        print("‚ö†Ô∏è Predi√ß√£o demorou muito, continuando...")
                        
        except KeyboardInterrupt:
            self.parar_graceful(None, None)
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico: {e}")
            self.executando = False
    
    def parar_graceful(self, signum, frame):
        """Para o servi√ßo graciosamente"""
        print("\n\n‚èπÔ∏è Parando servi√ßo de predi√ß√£o...")
        self.executando = False
        
        # Estat√≠sticas finais
        conn = self.model.conectar_banco()
        cursor = conn.cursor()
        
        # Contar predi√ß√µes salvas
        cursor.execute("""
            SELECT COUNT(DISTINCT timestamp_predicao) 
            FROM predicoes_estoque_patio
            WHERE timestamp_predicao > datetime('now', '-1 day')
        """)
        predicoes_24h = cursor.fetchone()[0]
        
        # √öltima predi√ß√£o
        cursor.execute("""
            SELECT timestamp_predicao, COUNT(*) 
            FROM predicoes_estoque_patio
            GROUP BY timestamp_predicao
            ORDER BY timestamp_predicao DESC
            LIMIT 1
        """)
        ultima = cursor.fetchone()
        
        conn.close()
        
        print(f"\nüìä Estat√≠sticas finais:")
        print(f"   Predi√ß√µes executadas: {self.contador_predicoes}")
        print(f"   Predi√ß√µes √∫ltimas 24h: {predicoes_24h}")
        if ultima:
            print(f"   √öltima predi√ß√£o: {ultima[0]} ({ultima[1]} horas)")
        
        print("\n‚úÖ Servi√ßo finalizado")
    
    def limpar_predicoes_antigas(self, dias=7):
        """Remove predi√ß√µes antigas do banco"""
        conn = self.model.conectar_banco()
        cursor = conn.cursor()
        
        cursor.execute("""
            DELETE FROM predicoes_estoque_patio
            WHERE timestamp_predicao < datetime('now', '-{} days')
        """.format(dias))
        
        deletados = cursor.rowcount
        conn.commit()
        conn.close()
        
        if deletados > 0:
            print(f"üßπ Removidas {deletados} predi√ß√µes antigas (>{dias} dias)")


def testar_servico():
    """Teste r√°pido do servi√ßo"""
    print("üß™ Teste do Servi√ßo de Predi√ß√£o")
    print("=" * 40)
    
    service = PredictionService(intervalo_minutos=0.1)  # 6 segundos para teste
    
    # Executar por 20 segundos
    print("Executando por 20 segundos...")
    
    thread = threading.Thread(target=service.executar)
    thread.start()
    
    time.sleep(20)
    
    service.executando = False
    thread.join()
    
    print("\n‚úÖ Teste conclu√≠do")


def main():
    """Fun√ß√£o principal"""
    args = sys.argv[1:]
    
    if "--help" in args or "-h" in args:
        print("""
üîÆ Servi√ßo de Predi√ß√£o - Sistema Log√≠stica JIT

USO:
  python prediction_service.py              # Intervalo padr√£o (5 min)
  python prediction_service.py --intervalo 10  # A cada 10 minutos
  python prediction_service.py --teste      # Modo teste r√°pido
  python prediction_service.py --limpar     # Limpar predi√ß√µes antigas

FUNCIONALIDADES:
  - Executa predi√ß√£o das pr√≥ximas 9 horas
  - Identifica ofensores quando sai dos limites
  - Salva hist√≥rico de predi√ß√µes
  - Alertas autom√°ticos para situa√ß√µes cr√≠ticas
  - N√≠veis de confiabilidade decrescentes

MODELO:
  - Combina padr√µes hist√≥ricos com tend√™ncias recentes
  - Confiabilidade: 95% (1h) at√© 45% (9h)
  - Identifica causas de desvios
""")
        return
    
    # Modo teste
    if "--teste" in args:
        testar_servico()
        return
    
    # Limpar predi√ß√µes antigas
    if "--limpar" in args:
        service = PredictionService()
        service.limpar_predicoes_antigas()
        return
    
    # Intervalo personalizado
    intervalo = 5  # padr√£o 5 minutos
    if "--intervalo" in args:
        try:
            idx = args.index("--intervalo")
            intervalo = int(args[idx + 1])
        except (IndexError, ValueError):
            print("‚ùå Erro: --intervalo precisa de um n√∫mero")
            return
    
    # Executar servi√ßo
    service = PredictionService(intervalo_minutos=intervalo)
    service.executar()


if __name__ == "__main__":
    main()