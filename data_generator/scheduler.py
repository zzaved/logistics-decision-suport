"""
Scheduler Autom√°tico - Sistema Log√≠stica JIT
Executa o mock generator a cada 10 segundos simulando dados em tempo real
"""

import time
import signal
import sys
from datetime import datetime
from pathlib import Path

# Adicionar path para importar mock_generator
sys.path.append(str(Path(__file__).parent))
from mock_generator import MockDataGenerator

class LogisticaScheduler:
    """
    Scheduler que executa gera√ß√£o de dados em intervalos regulares
    Simula dados chegando da usina em tempo real
    """
    
    def __init__(self, intervalo_segundos=10):
        self.intervalo = intervalo_segundos
        self.executando = False
        self.generator = None
        self.contador_ciclos = 0
        
        # Configurar handler para parada graceful (Ctrl+C)
        signal.signal(signal.SIGINT, self.parar_graceful)
        signal.signal(signal.SIGTERM, self.parar_graceful)
    
    def inicializar(self):
        """Inicializa o gerador e verifica conex√µes"""
        try:
            self.generator = MockDataGenerator()
            print("‚úÖ Mock Data Generator inicializado")
            
            # Teste r√°pido
            self.generator.status_banco()
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao inicializar: {e}")
            print("üí° Certifique-se que o banco foi criado: python database/init_db.py")
            return False
    
    def executar_ciclo(self):
        """Executa um ciclo de gera√ß√£o de dados"""
        try:
            dados = self.generator.gerar_ciclo_completo()
            self.contador_ciclos += 1
            
            # A cada 50 ciclos (~8min), limpar dados antigos
            if self.contador_ciclos % 50 == 0:
                self.generator.limpar_dados_antigos(horas=2)
                print(f"üìä Ciclos executados: {self.contador_ciclos}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no ciclo {self.contador_ciclos}: {e}")
            return False
    
    def executar(self):
        """Loop principal do scheduler"""
        if not self.inicializar():
            return
        
        self.executando = True
        
        print(f"üöÄ Scheduler iniciado - dados a cada {self.intervalo}s")
        print("üí° Pressione Ctrl+C para parar")
        print("=" * 60)
        
        try:
            while self.executando:
                inicio = time.time()
                
                # Executar ciclo
                sucesso = self.executar_ciclo()
                
                if not sucesso:
                    print("‚ö†Ô∏è Erro no ciclo, continuando...")
                
                # Aguardar intervalo (compensando tempo de execu√ß√£o)
                tempo_execucao = time.time() - inicio
                tempo_espera = max(0, self.intervalo - tempo_execucao)
                
                if tempo_espera > 0:
                    time.sleep(tempo_espera)
                
        except KeyboardInterrupt:
            self.parar_graceful(None, None)
        
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico no scheduler: {e}")
            self.parar()
    
    def parar_graceful(self, signum, frame):
        """Para o scheduler de forma graciosa"""
        print("\n‚èπÔ∏è Parando scheduler...")
        self.executando = False
        
        if self.generator:
            print("üìä Status final do banco:")
            self.generator.status_banco()
        
        print(f"‚úÖ Scheduler parado ap√≥s {self.contador_ciclos} ciclos")
        print("üíæ Dados preservados no banco")
    
    def parar(self):
        """Para o scheduler imediatamente"""
        self.executando = False

def mostrar_ajuda():
    """Mostra instru√ß√µes de uso"""
    print("""
üöÄ Sistema Log√≠stica JIT - Data Scheduler

COMO USAR:
  python scheduler.py              # Executa com intervalo padr√£o (10s)
  python scheduler.py --intervalo 5   # Executa a cada 5 segundos
  python scheduler.py --teste      # Executa apenas 5 ciclos para teste
  python scheduler.py --help       # Mostra esta ajuda

FUNCIONAMENTO:
  - Gera dados das 3 curvas principais a cada X segundos
  - Simula opera√ß√£o real da usina em tempo real  
  - Dados baseados em padr√µes reais, mas SEM regras fixas
  - Armazena no banco SQLite para consumo da API

CONTROLES:
  Ctrl+C  = Para execu√ß√£o e mostra estat√≠sticas
  
PR√ìXIMOS PASSOS:
  1. Deixar este scheduler rodando
  2. Em outro terminal: python backend/main.py
  3. Em outro terminal: streamlit run frontend/dashboard.py
""")

def main():
    """Fun√ß√£o principal"""
    
    # Processar argumentos simples
    args = sys.argv[1:]
    
    if "--help" in args or "-h" in args:
        mostrar_ajuda()
        return
    
    # Intervalo personalizado
    intervalo = 10
    if "--intervalo" in args:
        try:
            idx = args.index("--intervalo")
            intervalo = int(args[idx + 1])
        except (IndexError, ValueError):
            print("‚ùå Erro: --intervalo precisa de um n√∫mero")
            return
    
    # Modo teste
    modo_teste = "--teste" in args
    
    # Criar e executar scheduler
    scheduler = LogisticaScheduler(intervalo_segundos=intervalo)
    
    if modo_teste:
        print("üß™ Modo teste: executando apenas 5 ciclos")
        scheduler.inicializar()
        for i in range(5):
            print(f"\n--- Ciclo {i+1}/5 ---")
            scheduler.executar_ciclo()
            if i < 4:  # N√£o esperar no √∫ltimo
                time.sleep(intervalo)
        print("\n‚úÖ Teste conclu√≠do!")
        scheduler.generator.status_banco()
    else:
        scheduler.executar()

if __name__ == "__main__":
    main()